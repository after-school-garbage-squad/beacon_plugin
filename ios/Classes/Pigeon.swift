// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct BeaconData {
  var serviceUUID: String? = nil
  var hwid: String? = nil
  var rssi: Double? = nil

  static func fromList(_ list: [Any?]) -> BeaconData? {
    let serviceUUID: String? = nilOrValue(list[0])
    let hwid: String? = nilOrValue(list[1])
    let rssi: Double? = nilOrValue(list[2])

    return BeaconData(
      serviceUUID: serviceUUID,
      hwid: hwid,
      rssi: rssi
    )
  }
  func toList() -> [Any?] {
    return [
      serviceUUID,
      hwid,
      rssi,
    ]
  }
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol BeaconManagerApi {
  func setBeaconServiceUUIDs(uuid: [String], completion: @escaping (Result<Void, Error>) -> Void)
  func startScanning(completion: @escaping (Result<Void, Error>) -> Void)
  func stopScanning(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class BeaconManagerApiSetup {
  /// The codec used by BeaconManagerApi.
  /// Sets up an instance of `BeaconManagerApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: BeaconManagerApi?) {
    let setBeaconServiceUUIDsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.beacon_plugin.BeaconManagerApi.setBeaconServiceUUIDs", binaryMessenger: binaryMessenger)
    if let api = api {
      setBeaconServiceUUIDsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArg = args[0] as! [String]
        api.setBeaconServiceUUIDs(uuid: uuidArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      setBeaconServiceUUIDsChannel.setMessageHandler(nil)
    }
    let startScanningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.beacon_plugin.BeaconManagerApi.startScanning", binaryMessenger: binaryMessenger)
    if let api = api {
      startScanningChannel.setMessageHandler { _, reply in
        api.startScanning() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      startScanningChannel.setMessageHandler(nil)
    }
    let stopScanningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.beacon_plugin.BeaconManagerApi.stopScanning", binaryMessenger: binaryMessenger)
    if let api = api {
      stopScanningChannel.setMessageHandler { _, reply in
        api.stopScanning() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      stopScanningChannel.setMessageHandler(nil)
    }
  }
}
private class FlutterBeaconApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return BeaconData.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class FlutterBeaconApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? BeaconData {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterBeaconApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterBeaconApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterBeaconApiCodecWriter(data: data)
  }
}

class FlutterBeaconApiCodec: FlutterStandardMessageCodec {
  static let shared = FlutterBeaconApiCodec(readerWriter: FlutterBeaconApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class FlutterBeaconApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return FlutterBeaconApiCodec.shared
  }
  func onScanned(beaconDataList beaconDataListArg: [BeaconData], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.beacon_plugin.FlutterBeaconApi.onScanned", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([beaconDataListArg] as [Any?]) { _ in
      completion()
    }
  }
}
