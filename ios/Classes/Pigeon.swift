// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct BeaconData {
  var uuid: String? = nil
  var major: String? = nil
  var minor: String? = nil
  var rssi: Int64? = nil
  var proximity: Int64? = nil
  var hwid: String? = nil

  static func fromList(_ list: [Any?]) -> BeaconData? {
    let uuid: String? = nilOrValue(list[0])
    let major: String? = nilOrValue(list[1])
    let minor: String? = nilOrValue(list[2])
    let rssi: Int64? =
      list[3] is NSNull ? nil : (list[3] is Int64? ? list[3] as! Int64? : Int64(list[3] as! Int32))
    let proximity: Int64? =
      list[4] is NSNull ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))
    let hwid: String? = nilOrValue(list[5])

    return BeaconData(
      uuid: uuid,
      major: major,
      minor: minor,
      rssi: rssi,
      proximity: proximity,
      hwid: hwid
    )
  }
  func toList() -> [Any?] {
    return [
      uuid,
      major,
      minor,
      rssi,
      proximity,
      hwid,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct RegionData {
  var uuid: String? = nil
  var major: String? = nil
  var minor: String? = nil
  var state: Int64? = nil

  static func fromList(_ list: [Any?]) -> RegionData? {
    let uuid: String? = nilOrValue(list[0])
    let major: String? = nilOrValue(list[1])
    let minor: String? = nilOrValue(list[2])
    let state: Int64? =
      list[3] is NSNull ? nil : (list[3] is Int64? ? list[3] as! Int64? : Int64(list[3] as! Int32))

    return RegionData(
      uuid: uuid,
      major: major,
      minor: minor,
      state: state
    )
  }
  func toList() -> [Any?] {
    return [
      uuid,
      major,
      minor,
      state,
    ]
  }
}

private class BeaconManagerApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return BeaconData.fromList(self.readValue() as! [Any?])
    case 129:
      return RegionData.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class BeaconManagerApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? BeaconData {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? RegionData {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class BeaconManagerApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return BeaconManagerApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return BeaconManagerApiCodecWriter(data: data)
  }
}

class BeaconManagerApiCodec: FlutterStandardMessageCodec {
  static let shared = BeaconManagerApiCodec(readerWriter: BeaconManagerApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol BeaconManagerApi {
  func startMonitoring(completion: @escaping (Result<Void, Error>) -> Void)
  func stopMonitoring(completion: @escaping (Result<Void, Error>) -> Void)
  func getMonitoredRegion(completion: @escaping (Result<RegionData?, Error>) -> Void)
  func startRanging(completion: @escaping (Result<Void, Error>) -> Void)
  func stopRanging(completion: @escaping (Result<Void, Error>) -> Void)
  func getRangedBeacons(completion: @escaping (Result<[BeaconData?]?, Error>) -> Void)
  func startForegroundService(completion: @escaping (Result<Void, Error>) -> Void)
  func stopForegroundService(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class BeaconManagerApiSetup {
  /// The codec used by BeaconManagerApi.
  static var codec: FlutterStandardMessageCodec { BeaconManagerApiCodec.shared }
  /// Sets up an instance of `BeaconManagerApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: BeaconManagerApi?) {
    let startMonitoringChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.BeaconManagerApi.startMonitoring", binaryMessenger: binaryMessenger,
      codec: codec)
    if let api = api {
      startMonitoringChannel.setMessageHandler { _, reply in
        api.startMonitoring { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startMonitoringChannel.setMessageHandler(nil)
    }
    let stopMonitoringChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.BeaconManagerApi.stopMonitoring", binaryMessenger: binaryMessenger,
      codec: codec)
    if let api = api {
      stopMonitoringChannel.setMessageHandler { _, reply in
        api.stopMonitoring { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopMonitoringChannel.setMessageHandler(nil)
    }
    let getMonitoredRegionChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.BeaconManagerApi.getMonitoredRegion",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getMonitoredRegionChannel.setMessageHandler { _, reply in
        api.getMonitoredRegion { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getMonitoredRegionChannel.setMessageHandler(nil)
    }
    let startRangingChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.BeaconManagerApi.startRanging", binaryMessenger: binaryMessenger,
      codec: codec)
    if let api = api {
      startRangingChannel.setMessageHandler { _, reply in
        api.startRanging { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startRangingChannel.setMessageHandler(nil)
    }
    let stopRangingChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.BeaconManagerApi.stopRanging", binaryMessenger: binaryMessenger,
      codec: codec)
    if let api = api {
      stopRangingChannel.setMessageHandler { _, reply in
        api.stopRanging { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopRangingChannel.setMessageHandler(nil)
    }
    let getRangedBeaconsChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.BeaconManagerApi.getRangedBeacons",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getRangedBeaconsChannel.setMessageHandler { _, reply in
        api.getRangedBeacons { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getRangedBeaconsChannel.setMessageHandler(nil)
    }
    let startForegroundServiceChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.BeaconManagerApi.startForegroundService",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startForegroundServiceChannel.setMessageHandler { _, reply in
        api.startForegroundService { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startForegroundServiceChannel.setMessageHandler(nil)
    }
    let stopForegroundServiceChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.BeaconManagerApi.stopForegroundService",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopForegroundServiceChannel.setMessageHandler { _, reply in
        api.stopForegroundService { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopForegroundServiceChannel.setMessageHandler(nil)
    }
  }
}
