// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class BeaconData {
  BeaconData({
    this.serviceUUID,
    this.hwid,
  });

  String? serviceUUID;

  String? hwid;

  Object encode() {
    return <Object?>[
      serviceUUID,
      hwid,
    ];
  }

  static BeaconData decode(Object result) {
    result as List<Object?>;
    return BeaconData(
      serviceUUID: result[0] as String?,
      hwid: result[1] as String?,
    );
  }
}

class BeaconManagerApi {
  /// Constructor for [BeaconManagerApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  BeaconManagerApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<void> setBeaconServiceUUIDs(List<String?> arg_uuid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.beacon_plugin.BeaconManagerApi.setBeaconServiceUUIDs', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_uuid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startScan() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.beacon_plugin.BeaconManagerApi.startScan', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopScan() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.beacon_plugin.BeaconManagerApi.stopScan', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _FlutterBeaconApiCodec extends StandardMessageCodec {
  const _FlutterBeaconApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BeaconData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return BeaconData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class FlutterBeaconApi {
  static const MessageCodec<Object?> codec = _FlutterBeaconApiCodec();

  void onScanned(List<BeaconData?> beaconDataList);

  static void setup(FlutterBeaconApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.beacon_plugin.FlutterBeaconApi.onScanned', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.beacon_plugin.FlutterBeaconApi.onScanned was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<BeaconData?>? arg_beaconDataList = (args[0] as List<Object?>?)?.cast<BeaconData?>();
          assert(arg_beaconDataList != null,
              'Argument for dev.flutter.pigeon.beacon_plugin.FlutterBeaconApi.onScanned was null, expected non-null List<BeaconData?>.');
          api.onScanned(arg_beaconDataList!);
          return;
        });
      }
    }
  }
}
